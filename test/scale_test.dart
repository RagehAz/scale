import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:scale/scale.dart';

void main() {

  /// COULD NOT BRING A CONTEXT AND DID NOT TEXT ANY OF BELOW METHODS GENERATED BY CHAT GBT
  BuildContext _context;
  //
  // testWidgets('me testing', (WidgetTester tester) async {
  //
  //   await tester.pumpWidget(
  //     Builder(
  //       builder: (BuildContext context) {
  //
  //         _context = context;
  //
  //         return Placeholder();
  //
  //       },
  //     ),
  //   );
  //
  // });
  // setUp(() async {
  //   WidgetsFlutterBinding.ensureInitialized();
  //   TestWidgetsFlutterBinding.ensureInitialized();
  //   // _context = WidgetsBinding.instance.;
  //
  //   await tester.pumpWidget(MaterialApp(home: Material(child: Container())));
  //   final BuildContext context = tester.element(find.byType(Container));
  //
  //
  // });

  test('screenWidth returns the correct width of the screen', () {
    double width = Scale.screenWidth(_context);
    expect(width, greaterThan(0));
  });

  test('screenHeight returns the correct height of the screen', () {
    double height = Scale.screenHeight(_context);
    expect(height, greaterThan(0));
  });

  test('superScreenHeightWithoutSafeArea returns the correct height of the screen without the safe area top padding', () {
    double height = Scale.superScreenHeightWithoutSafeArea(_context);
    expect(height, greaterThan(0));
  });

  test('superSafeAreaTopPadding returns the correct top padding of the safe area', () {
    double padding = Scale.superSafeAreaTopPadding(_context);
    expect(padding, greaterThanOrEqualTo(0));
  });

  test('superInsets returns the correct EdgeInsets with the specified left, right, top, and bottom values', () {
    EdgeInsets insets = Scale.superInsets(
      context: _context,
      appIsLeftToRight: true,
      enLeft: 10,
      enRight: 20,
      top: 5,
      bottom: 15,
    );
    expect(insets.left, 10);
    expect(insets.right, 20);
    expect(insets.top, 5);
    expect(insets.bottom, 15);
  });

  test('superMargins returns the correct EdgeInsets with the specified margin values', () {
    final EdgeInsets margins1 = Scale.superMargins(margin: 10);
    expect(margins1.bottom, 10);

    final EdgeInsets margins2 = Scale.superMargins(margin: const EdgeInsets.only(left: 5, right: 15, top: 20, bottom: 25));
    expect(margins2.left, 5);
    expect(margins2.right, 15);
    expect(margins2.top, 20);
    expect(margins2.bottom, 25);
  });

  test('superDeviceRatio returns the correct aspect ratio of the device', () {
    final double ratio = Scale.superDeviceRatio(_context);
    expect(ratio, greaterThan(0));
  });

  test('constantMarginsAll5 returns the correct EdgeInsets with a margin of 5 on all sides', () {
    const EdgeInsets margins = Scale.constantMarginsAll5;
    expect(margins.top, 5);
  });

  test('constantMarginsAll10 returns the correct EdgeInsets with a margin of 10 on all sides', () {
    const EdgeInsets margins = Scale.constantMarginsAll10;
    expect(margins.top, 10);
  });

  test('constantMarginsAll20 returns the correct EdgeInsets with a margin of 20 on all sides', () {
    const EdgeInsets margins = Scale.constantMarginsAll20;
    expect(margins.bottom, 20);
  });

  test('constantHorizontal5 returns the correct EdgeInsets with a horizontal margin of 5', () {
    const EdgeInsets margins = Scale.constantHorizontal5;
    expect(margins.horizontal, 5);
  });

  test('constantHorizontal10 returns the correct EdgeInsets with a horizontal margin of 10', () {
    const EdgeInsets margins = Scale.constantHorizontal10;
    expect(margins.horizontal, 10);
  });

  test('getUniformRowItemWidth returns the correct width for items in a row with the specified number of items and box width', () {
    double width = Scale.getUniformRowItemWidth(
      context: _context,
      numberOfItems: 3,
      boxWidth: 100,
    );
    expect(width, 30);
  });

  test('getUniformRowItemWidth returns the correct width for items in a row with the specified number of items, box width, and spacing', () {
    final double width = Scale.getUniformRowItemWidth(
      context: _context,
      numberOfItems: 3,
      boxWidth: 100,
      spacing: 20,
    );
    expect(width, 25);
  });

}
